version: '3.8'

services:
  # PostgreSQL database with PostGIS extension
  database:
    image: postgis/postgis:15-3.3
    container_name: natpac-db
    environment:
      POSTGRES_DB: natpac_travel_db
      POSTGRES_USER: natpac_user
      POSTGRES_PASSWORD: natpac_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/database-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - natpac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U natpac_user -d natpac_travel_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: natpac-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - natpac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: natpac-backend
    environment:
      - NODE_ENV=development
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=natpac_travel_db
      - DB_USER=natpac_user
      - DB_PASSWORD=natpac_password
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=development_jwt_secret_key_change_in_production
      - JWT_REFRESH_SECRET=development_refresh_secret_key_change_in_production
      - PORT=3000
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - natpac-network
    restart: unless-stopped
    command: npm run dev

  # Admin Dashboard (React.js)
  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile.dev
    container_name: natpac-admin
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api/v1
      - REACT_APP_WEBSOCKET_URL=ws://localhost:3000
    ports:
      - "3001:3000"
    volumes:
      - ./admin-dashboard:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - natpac-network
    restart: unless-stopped
    command: npm start

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:7
    container_name: natpac-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@natpac.gov.in
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - database
    networks:
      - natpac-network
    profiles:
      - tools

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: natpac-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - admin-dashboard
    networks:
      - natpac-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  natpac-network:
    driver: bridge

# Development shortcuts
# Run all services: docker-compose up -d
# Run with database tools: docker-compose --profile tools up -d
# Run production-like: docker-compose --profile production up -d
# View logs: docker-compose logs -f [service-name]
# Stop all: docker-compose down
# Reset data: docker-compose down -v